{
  "version": 3,
  "sources": ["../src/create.tsx", "../node_modules/nanoid/index.js", "../node_modules/nanoid/url-alphabet/index.js", "../src/storage.api.ts"],
  "sourcesContent": ["import { ActionPanel, Form, showHUD, useNavigation, Action } from \"@raycast/api\";\nimport { nanoid } from \"nanoid\";\nimport { ISSHConnection } from \"./types\";\nimport { getConnections, saveConnections } from \"./storage.api\";\n\nexport default function Main() {\n  const { pop } = useNavigation();\n\n  async function saveConnection(connection: ISSHConnection) {\n    const existingConnections = await getConnections();\n    existingConnections.push({ ...connection, id: nanoid() });\n\n    await saveConnections(existingConnections);\n    await showHUD(\"Saved connection \u2705\");\n\n    pop();\n  }\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Save\" onSubmit={(values: ISSHConnection) => saveConnection(values)} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"name\" title=\"Connection Name\" />\n      <Form.TextField id=\"address\" title=\"Server Address\" placeholder={\"A resolvable DNS name or IP\"} />\n      <Form.TextField id=\"user\" title=\"Username\" placeholder={\"A username to authenticate with\"} />\n      <Form.TextField id=\"port\" title=\"Port (optional)\" placeholder={\"An optional custom port (other than 22)\"} />\n      <Form.TextField\n        id=\"sshKey\"\n        title=\"SSH Key Location (optional)\"\n        placeholder={\"An optional key path to authenticate with\"}\n      />\n    </Form>\n  );\n}\n", "import crypto from 'crypto'\nimport { urlAlphabet } from './url-alphabet/index.js'\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nlet random = bytes => {\n  fillPool((bytes -= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n}\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  fillPool((size -= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += urlAlphabet[pool[i] & 63]\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n", "let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n", "import { LocalStorage } from \"@raycast/api\";\nimport { ISSHConnection } from \"./types\";\n\nexport async function getConnections(): Promise<ISSHConnection[]> {\n  const { connections } = await LocalStorage.allItems();\n  if (!connections) return [];\n\n  return JSON.parse(connections);\n}\n\nexport async function saveConnections(connections: ISSHConnection[]) {\n  await LocalStorage.setItem(\"connections\", JSON.stringify(connections));\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAkE,wBCAlE,IAAAC,EAAmB,uBCAnB,IAAIC,EACF,mEDCF,IAAMC,EAAuB,IACzBC,EAAMC,EACNC,EAAWC,GAAS,CAClB,CAACH,GAAQA,EAAK,OAASG,GACzBH,EAAO,OAAO,YAAYG,EAAQJ,CAAoB,EACtD,EAAAK,QAAO,eAAeJ,CAAI,EAC1BC,EAAa,GACJA,EAAaE,EAAQH,EAAK,SACnC,EAAAI,QAAO,eAAeJ,CAAI,EAC1BC,EAAa,GAEfA,GAAcE,CAChB,EAsBA,IAAIE,EAAS,CAACC,EAAO,KAAO,CAC1BC,EAAUD,GAAQ,CAAE,EACpB,IAAIE,EAAK,GACT,QAASC,EAAIC,EAAaJ,EAAMG,EAAIC,EAAYD,IAC9CD,GAAMG,EAAYC,EAAKH,GAAK,IAE9B,OAAOD,CACT,EE3CA,IAAAK,EAA6B,wBAG7B,eAAsBC,GAA4C,CAChE,GAAM,CAAE,YAAAC,CAAY,EAAI,MAAM,eAAa,SAAS,EACpD,OAAKA,EAEE,KAAK,MAAMA,CAAW,EAFJ,CAAC,CAG5B,CAEA,eAAsBC,EAAgBD,EAA+B,CACnE,MAAM,eAAa,QAAQ,cAAe,KAAK,UAAUA,CAAW,CAAC,CACvE,CHZA,IAAAE,EAAA,6BAKe,SAARC,GAAwB,CAC7B,GAAM,CAAE,IAAAC,CAAI,KAAI,iBAAc,EAE9B,eAAeC,EAAeC,EAA4B,CACxD,IAAMC,EAAsB,MAAMC,EAAe,EACjDD,EAAoB,KAAK,CAAE,GAAGD,EAAY,GAAIG,EAAO,CAAE,CAAC,EAExD,MAAMC,EAAgBH,CAAmB,EACzC,QAAM,WAAQ,yBAAoB,EAElCH,EAAI,CACN,CAEA,SACE,QAAC,QACC,WACE,OAAC,eACC,mBAAC,SAAO,WAAP,CAAkB,MAAM,OAAO,SAAWO,GAA2BN,EAAeM,CAAM,EAAG,EAChG,EAGF,oBAAC,OAAK,UAAL,CAAe,GAAG,OAAO,MAAM,kBAAkB,KAClD,OAAC,OAAK,UAAL,CAAe,GAAG,UAAU,MAAM,iBAAiB,YAAa,8BAA+B,KAChG,OAAC,OAAK,UAAL,CAAe,GAAG,OAAO,MAAM,WAAW,YAAa,kCAAmC,KAC3F,OAAC,OAAK,UAAL,CAAe,GAAG,OAAO,MAAM,kBAAkB,YAAa,0CAA2C,KAC1G,OAAC,OAAK,UAAL,CACC,GAAG,SACH,MAAM,8BACN,YAAa,4CACf,GACF,CAEJ",
  "names": ["create_exports", "__export", "Main", "__toCommonJS", "import_api", "import_crypto", "urlAlphabet", "POOL_SIZE_MULTIPLIER", "pool", "poolOffset", "fillPool", "bytes", "crypto", "nanoid", "size", "fillPool", "id", "i", "poolOffset", "urlAlphabet", "pool", "import_api", "getConnections", "connections", "saveConnections", "import_jsx_runtime", "Main", "pop", "saveConnection", "connection", "existingConnections", "getConnections", "nanoid", "saveConnections", "values"]
}
